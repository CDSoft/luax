#!/usr/bin/env luax

section [[
This file is part of luax.

luax is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

luax is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with luax.  If not, see <https://www.gnu.org/licenses/>.

For further information about luax you can visit
http://cdelord.fr/luax
]]

local F = require "F"
local fs = require "fs"

help.name "LuaX"
help.description [[
Lua eXtended
Copyright (C) 2021-2023 Christophe Delord (https://cdelord.fr/luax)

luax is a Lua interpreter and REPL based on Lua 5.4
augmented with some useful packages.
luax can also produce standalone executables from Lua scripts.

luax runs on several platforms with no dependency:

- Linux (x86_64, x86, aarch64)
- MacOS (x86_64, aarch64)
- Windows (x86_64, x86)

luax can « cross-compile » scripts from and to any of these platforms.
]]

section [[
WARNING: This file has been generated by bang. DO NOT MODIFY IT.
If you need to update the build system, please modify build.lua
and run bang to regenerate build.ninja.
]]

local mode = "release"

F.foreach(arg, function(a)
    if a == "debug" or a == "release" then mode = a
    else
        error(a..": unknown parameter")
    end
end)

--===================================================================
section "Build environment"
---------------------------------------------------------------------

var "builddir" ".build"

var "bin" "$builddir/bin"
var "lib" "$builddir/lib"
var "doc" "$builddir/doc"
var "tmp" "$builddir/tmp"
var "test" "$builddir/test"

local targets = F{
    -- Linux
    "x86_64-linux-musl",
    "x86_64-linux-gnu",
    "x86-linux-musl",
    "x86-linux-gnu",
    "aarch64-linux-musl",
    "aarch64-linux-gnu",

    -- Windows
    "x86_64-windows-gnu",
    "x86-windows-gnu",

    -- MacOS
    "x86_64-macos-none",
    "aarch64-macos-none",

    -- Wasm
    "wasm32-wasi",
}

local compile = {}
local test = {}
local doc = {}

--===================================================================
section "Zig compiler"
---------------------------------------------------------------------

local zig_version = "0.11.0"
var "zig"           (".zig" / zig_version / "zig")
var "zig_cache"     (vars.zig:dirname() / "cache")

build "$zig" { "tools/install_zig.sh",
    command = {"$in", zig_version, "$out"},
}

rule "mkdir" { command = "mkdir -p $out" }

build "$zig_cache" { "mkdir" }

--===================================================================
section "Third-party modules update"
---------------------------------------------------------------------

build "update_modules" {
    command = {"tools/update-third-party-modules.sh", "$builddir/update"},
    pool = "console",
}

--===================================================================
section "lz4 cli"
---------------------------------------------------------------------

var "lz4" "$tmp/lz4"

build "$lz4" { ls "ext/c/lz4/**.c",
    command = {
        "ZIG_LOCAL_CACHE_DIR=$zig_cache",
        "$zig cc",
        "-s",
        "-Os",
        "-Iext/c/lz4/lib",
        "$in -o $out",
    },
    implicit_in = {
        "$zig",
        "$zig_cache",
        ls "ext/c/lz4/**.h",
    },
}

--===================================================================
section "LuaX sources"
---------------------------------------------------------------------

comment [[
The lists of C sources for Zig build are generated in config.zig"
]]

local linux_only = F{
    "ext/c/luasocket/serial.c",
    "ext/c/luasocket/unixdgram.c",
    "ext/c/luasocket/unixstream.c",
    "ext/c/luasocket/usocket.c",
    "ext/c/luasocket/unix.c",
    "ext/c/linenoise/linenoise.c",
    "ext/c/linenoise/utf8.c",
}
local windows_only = F{
    "ext/c/luasocket/wsocket.c",
}
local ignored_sources = F{
    "ext/c/lqmath/src/imath.c",
}

local zig = {
    lua_c_files = ls "lua/*.c"
        : filter(function(name) return F.not_elem(name:basename(), {"lua.c", "luac.c"}) end),
    lua_main_c_files = F{ "lua/lua.c" },
    luax_main_c_files = F{ "luax/luax.c" },
    luax_c_files = ls "luax-libs/**.c",
    third_party_c_files = ls "ext/c/**.c"
        : filter(function(name) return not name:match "lz4/programs" end)
        : filter(function(name) return F.not_elem(name, linux_only) end)
        : filter(function(name) return F.not_elem(name, windows_only) end)
        : filter(function(name) return F.not_elem(name, ignored_sources) end),
    linux_third_party_c_files = linux_only,
    windows_third_party_c_files = windows_only,
}

local function array(list_name)
    return F.flatten {
        "pub const "..list_name.." = [_][]const u8 {",
        zig[list_name]
            : map(function(name) return '    "'..name..'",' end),
        "};",
    } : unlines()
end

local config_zig_vars = F.I {
    array = array,
    release = mode == "debug" and ".Debug" or ".ReleaseFast",
    strip   = mode == "debug" and "false"  or "true",
    optim   = mode == "debug" and "-Og"    or "-O3",
    debug   = mode == "debug" and "-g"     or "",
    build_path = vars.builddir/"tmp",
}

F.compose { file "config.zig", config_zig_vars }
[===[
// Generated by build.lua (bang)

pub const lua_src = "lua";
pub const src_path = "luax-libs";
pub const build_path = "$(build_path)";

pub const release = $(release);
pub const strip = $(strip);
pub const optim = "$(optim)";
pub const debug = "$(debug)";

$(array "lua_c_files")
$(array "lua_main_c_files")
$(array "luax_main_c_files")
$(array "luax_c_files")
$(array "third_party_c_files")
$(array "linux_third_party_c_files")
$(array "windows_third_party_c_files")
]===]

--===================================================================
section "Native Lua interpreter"
---------------------------------------------------------------------

var "lua" "$tmp/lua"

var "lua_path" (
    F{
        ".",
        "$tmp",
        "luax-libs",
        ls "luax-libs/*" : filter(fs.is_dir),
    }
    : flatten()
    : map(function(path) return path / "?.lua" end)
    : str ";"
)

build "$lua" { "build-lua.zig",
    command = {
        ". tools/build_env.sh $tmp;",
        "$zig build",
            "--cache-dir $zig_cache",
            "--prefix `dirname $out` --prefix-exe-dir \"\"",
            "-Dtarget=$$ARCH-$$OS-$$LIBC",
            "--build-file $in",
        "&& touch $out",
    },
    implicit_in = {
        "tools/build_env.sh",
        "$zig",
        zig.lua_c_files,
        zig.lua_main_c_files,
        "config.zig",
    },
}

--===================================================================
section "LuaX configuration"
---------------------------------------------------------------------

comment [[
The configuration file (luax_config.h and luax_config.lua)
are created in `luax-libs`
]]

var "luax_config_h"   "$tmp/luax_config.h"
var "luax_config_lua" "$tmp/luax_config.lua"
var "luax_crypt_key"  "$tmp/luax_crypt_key.h"

local magic_id = "LuaX"

local luax_config_table = (F.I % "%%()") {
    MAGIC_ID = magic_id,
    TARGETS = targets:show(),
}

F.compose { file "tools/gen_config_h.sh", luax_config_table } [[
#!/bin/bash

LUAX_CONFIG_H="$1"

cat <<EOF > "$LUAX_CONFIG_H"
#pragma once
#define LUAX_VERSION "$(git describe --tags)"
#define LUAX_DATE "$(git show -s --format=%cd --date=format:'%Y-%m-%d')"
#define LUAX_MAGIC_ID "%(MAGIC_ID)"
EOF
]]

F.compose { file "tools/gen_config_lua.sh", luax_config_table } [[
#!/bin/bash

LUAX_CONFIG_LUA="$1"

cat <<EOF > "$LUAX_CONFIG_LUA"
--@LIB
return {
    version = "$(git describe --tags)",
    date = "$(git show -s --format=%cd --date=format:'%Y-%m-%d')",
    magic_id = "%(MAGIC_ID)",
    targets = %(TARGETS),
}
EOF
]]

rule "gen_config" {
    command = {
        ". tools/build_env.sh $tmp;",
        "bash", "$in", "$out",
    },
    implicit_in = {
        "tools/build_env.sh",
        ".git/refs/tags", ".git/index",
        "$lua"
    },
}

build "$luax_config_h"   { "gen_config", "tools/gen_config_h.sh" }
build "$luax_config_lua" { "gen_config", "tools/gen_config_lua.sh" }

build "$luax_crypt_key"  {
    command = {
        ". tools/build_env.sh $tmp;",
        "$lua", "tools/crypt_key.lua", "LUAX_CRYPT_KEY", '"$$CRYPT_KEY"', "> $out",
    },
    implicit_in = {
        "$lua",
        "tools/build_env.sh",
        "tools/crypt_key.lua",
    }
}

--===================================================================
section "Lua runtime"
---------------------------------------------------------------------

local luax_runtime = {
    ls "luax-libs/**.lua",
    ls "ext/**.lua",
}

var "luax_runtime_bundle" "$tmp/lua_runtime_bundle.dat"

build "$luax_runtime_bundle" { "$luax_config_lua", luax_runtime,
    command = {
        ". tools/build_env.sh $tmp;",
        "LUA_PATH=\"$lua_path\"",
        "$lua",
        "-l tools/rc4_runtime",
        "luax/bundle.lua", "-lib -ascii",
        "$in > $out",
    },
    implicit_in = {
        "tools/build_env.sh",
        "$lz4",
        "$lua",
        "luax/bundle.lua",
        "tools/rc4_runtime.lua",
    },
}

--===================================================================
section "C runtimes"
---------------------------------------------------------------------

local function is_linux(target)
    return target:match "linux" or target:match "macos"
end

local function is_windows(target)
    return target:match "windows"
end

local function ext(target)
    return is_windows(target) and ".exe" or ""
end

local function shared_libs(target)
    if target : match "musl"    then return nil end
    if target : match "linux"   then return "libluax-"..target..".so" end
    if target : match "macos"   then return "libluax-"..target..".dylib" end
    if target : match "windows" then return "luax-"..target..".dll" end
    if target : match "wasm"    then return nil end
    error("Unknown shared libary for "..target)
end

-- imath is also provided by qmath, both versions shall be compatible
rule "diff" { command = "diff $in && touch $out" }
phony "check_limath_version" {
    build "$tmp/check_limath_header_version" { "diff", "ext/c/lqmath/src/imath.h", "ext/c/limath/src/imath.h" },
    build "$tmp/check_limath_source_version" { "diff", "ext/c/lqmath/src/imath.c", "ext/c/limath/src/imath.c" },
}

targets : foreach(function(target)

    section(target.." runtime")

    local e = ext(target)

    local shared_lib = shared_libs(target)
    local shared_lib_name = shared_lib and ("$tmp" / "lib" / shared_lib) or {}

    build("$tmp/luaxruntime-"..target..e) { "build.zig",
        command = {
            "RUNTIME_NAME=luaxruntime LIB_NAME=luax",
            "$zig build",
                "--cache-dir $zig_cache",
                "--prefix `dirname $out` --prefix-exe-dir \"\"",
                "-Dtarget="..target,
                "--build-file $in",
            "&& touch $out", shared_lib_name,
        },
        implicit_in = {
            "$zig",
            zig.lua_c_files,
            zig.luax_c_files,
            zig.luax_main_c_files,
            zig.third_party_c_files,
            is_linux(target) and linux_third_party_c_files or {},
            is_windows(target) and windows_third_party_c_files or {},
            "$luax_runtime_bundle",
            "$luax_config_h",
            "$luax_crypt_key",
            "config.zig",
            "check_limath_version",
        },
        implicit_out = shared_lib_name,
    }

end)

--===================================================================
section "LuaX binaries"
---------------------------------------------------------------------

local luax_packages = F.flatten {
    ls "luax/*.lua",
    "$luax_config_lua",
}

rule "cp" { command = {"cp", "-f", "$in", "$out"} }

local binaries = {}
local libraries = {}

targets : foreach(function(target)

    section("LuaX "..target)

    local e = ext(target)

    local shared_lib = shared_libs(target)

    acc(binaries) {
        build("$bin/luax-"..target..e) { luax_packages,
            command = {
                ". tools/build_env.sh $tmp;",
                "cp", "$tmp/luaxruntime-"..target..e, "$out",
                "&&",
                "LUA_PATH=\"$lua_path\"",
                "$lua",
                "-l tools/rc4_runtime",
                "luax/bundle.lua", "-binary",
                "$in >> $out",
            },
            implicit_in = {
                "tools/build_env.sh",
                "$lz4",
                "$lua",
                "tools/rc4_runtime.lua",
                "luax/bundle.lua",
                "$tmp/luaxruntime-"..target..e,
            },
        }
    }

    if shared_lib then

        acc(libraries) {
            build("$lib"/shared_lib) {
                "cp", "$tmp"/"lib"/shared_lib,
            }
        }

    end

end)

var "luax" "$bin/luax"

acc(binaries) {
    build "$luax" {
        command = {
            ". tools/build_env.sh $tmp;",
            "cp", "-f", "$bin/luax-$$ARCH-$$OS-$$LIBC$$EXT", "$out$$EXT",
        },
        implicit_in = {
            "tools/build_env.sh",
            binaries,
        },
    }
}

--===================================================================
section "LuaX Lua implementation"
---------------------------------------------------------------------

--===================================================================
section "$lib/luax.lua"
---------------------------------------------------------------------

local lib_luax_sources = F.flatten{
    ls "luax-libs/**.lua",
    ls "ext/lua/**.lua",
}

acc(libraries) {
    build "$lib/luax.lua" { "$luax_config_lua", lib_luax_sources,
        command = {
            ". tools/build_env.sh $tmp;",
            "LUA_PATH=\"$lua_path\"",
            "$lua",
            "-l tools/rc4_runtime",
            "luax/bundle.lua", "-lib -lua",
            "$in > $out",
        },
        implicit_in = {
            "tools/build_env.sh",
            "$lz4",
            "$lua",
            "luax/bundle.lua",
            "tools/rc4_runtime.lua",
        },
    }
}

--===================================================================
section "$bin/luax-lua"
---------------------------------------------------------------------

acc(binaries) {
    build "$bin/luax-lua" { "luax/luax.lua",
        command = { "$luax", "-q -t lua", "-o $out $in" },
        implicit_in = { "$luax", "$lib/luax.lua" },
    }
}

--===================================================================
section "$bin/luax-pandoc"
---------------------------------------------------------------------

acc(binaries) {
    build "$bin/luax-pandoc" { "luax/luax.lua",
        command = { "$luax", "-q -t pandoc", "-o $out $in" },
        implicit_in = { "$luax", "$lib/luax.lua" },
    }
}

--===================================================================
section "Tests"
---------------------------------------------------------------------

local test_sources = ls "tests/luax-tests/*.*"
local test_main = "tests/luax-tests/main.lua"

local valgrind = {
    mode == "debug" and "valgrind --quiet" or {},
}

acc(test) {

---------------------------------------------------------------------

    build "$test/test-1-luax_executable.ok" {
        command = {
            ". tools/build_env.sh $tmp;",
            valgrind,
            "$luax -q -o $test/test-luax", test_sources,
            "&&",
            "TYPE=static LUA_PATH='tests/luax-tests/?.lua'",
            "TEST_NUM=1",
            valgrind,
            "$test/test-luax Lua is great",
            "&&",
            "touch $out",
        },
        implicit_in = {
            "tools/build_env.sh",
            "$luax",
            test_sources,
        },
    },

---------------------------------------------------------------------

    build "$test/test-2-lib.ok" {
        command = {
            ". tools/build_env.sh $tmp;",
            "eval `$luax env`;",
            "TYPE=dynamic LUA_PATH='tests/luax-tests/?.lua'",
            "TEST_NUM=2",
            valgrind,
            "$lua", "-l libluax", test_main, "Lua is great",
            "&&",
            "touch $out",
        },
        implicit_in = {
            "tools/build_env.sh",
            "$lua",
            "$luax",
            libraries,
            test_sources,
        },
    },

---------------------------------------------------------------------

    build "$test/test-3-lua.ok" {
        command = {
            ". tools/build_env.sh $tmp;",
            "LIBC=lua TYPE=lua LUA_PATH='$lib/?.lua;tests/luax-tests/?.lua'",
            "TEST_NUM=3",
            "$lua", "-l luax", test_main, "Lua is great",
            "&&",
            "touch $out",
        },
        implicit_in = {
            "tools/build_env.sh",
            "$lua",
            "$lib/luax.lua",
            test_sources,
        },
    },

---------------------------------------------------------------------

    build "$test/test-4-lua-luax-lua.ok" {
        command = {
            ". tools/build_env.sh $tmp;",
            "LIBC=lua TYPE=lua LUA_PATH='$lib/?.lua;tests/luax-tests/?.lua'",
            "TEST_NUM=4",
            "$bin/luax-lua", test_main, "Lua is great",
            "&&",
            "touch $out",
        },
        implicit_in = {
            "tools/build_env.sh",
            "$lua",
            "$bin/luax-lua",
            test_sources,
        },
    },

---------------------------------------------------------------------

    build "$test/test-5-pandoc-luax-lua.ok" {
        command = {
            ". tools/build_env.sh $tmp;",
            "LIBC=lua TYPE=pandoc LUA_PATH='$lib/?.lua;tests/luax-tests/?.lua'",
            "TEST_NUM=5",
            "pandoc lua ", "-l luax", test_main, "Lua is great",
            "&&",
            "touch $out",
        },
        implicit_in = {
            "tools/build_env.sh",
            "$lua",
            "$lib/luax.lua",
            test_sources,
        },
    },

---------------------------------------------------------------------

-- This test is disabled since most of the binary distributions of Pandoc do not support dynamic loading
--[[
    build "$test/test-6-pandoc-luax-so.ok" {
        command = {
            ". tools/build_env.sh $tmp;",
            "eval `$luax env`;",
            "TYPE=pandoc LUA_CPATH='$lib/?.so' LUA_PATH='$lib/?.lua;tests/luax-tests/?.lua'",
            "TEST_NUM=6",
            "pandoc lua ", "-l libluax", test_main, "Lua is great",
            "&&",
            "touch $out",
        },
        implicit_in = {
            "tools/build_env.sh",
            "$lua",
            "$luax",
            "$lib/luax.lua",
            test_sources,
        },
    },
--]]

---------------------------------------------------------------------

    build "$test/test-ext-1-lua.ok" { "tests/external_interpreter_tests/external_interpreters.lua",
        command = {
            ". tools/build_env.sh $tmp;",
            "eval `$luax env`;",
            "$luax -q -t lua -o $test/ext-lua", "$in",
            "&&",
            "TARGET=lua",
            "$test/ext-lua Lua is great",
            "&&",
            "touch $out",
        },
        implicit_in = {
            "tools/build_env.sh",
            "$lib/luax.lua",
            "$luax",
            binaries,
        },
    },

---------------------------------------------------------------------

    build "$test/test-ext-2-lua-luax.ok" { "tests/external_interpreter_tests/external_interpreters.lua",
        command = {
            ". tools/build_env.sh $tmp;",
            "eval `$luax env`;",
            "$luax -q -t lua-luax -o $test/ext-lua-luax", "$in",
            "&&",
            "TARGET=lua-luax",
            "$test/ext-lua-luax Lua is great",
            "&&",
            "touch $out",
        },
        implicit_in = {
            "tools/build_env.sh",
            "$lib/luax.lua",
            "$luax",
        },
    },

---------------------------------------------------------------------

    build "$test/test-ext-3-luax.ok" { "tests/external_interpreter_tests/external_interpreters.lua",
        command = {
            ". tools/build_env.sh $tmp;",
            "eval `$luax env`;",
            "$luax -q -t luax -o $test/ext-luax", "$in",
            "&&",
            "TARGET=luax",
            "$test/ext-luax Lua is great",
            "&&",
            "touch $out",
        },
        implicit_in = {
            "tools/build_env.sh",
            "$lib/luax.lua",
            "$luax",
        },
    },

---------------------------------------------------------------------

    build "$test/test-ext-4-pandoc.ok" { "tests/external_interpreter_tests/external_interpreters.lua",
        command = {
            ". tools/build_env.sh $tmp;",
            "eval `$luax env`;",
            "$luax -q -t pandoc -o $test/ext-pandoc", "$in",
            "&&",
            "TARGET=pandoc",
            "$test/ext-pandoc Lua is great",
            "&&",
            "touch $out",
        },
        implicit_in = {
            "tools/build_env.sh",
            "$lib/luax.lua",
            "$luax",
            binaries,
        },
    },

---------------------------------------------------------------------

-- This test is disabled since most of the binary distributions of Pandoc do not support dynamic loading
--[[
    build "$test/test-ext-5-pandoc-luax.ok" { "tests/external_interpreter_tests/external_interpreters.lua",
        command = {
            ". tools/build_env.sh $tmp;",
            "eval `$luax env`;",
            "$luax -q -t pandoc-luax -o $test/ext-pandoc-luax", "$in",
            "&&",
            "TARGET=pandoc-luax",
            "$test/ext-pandoc-luax Lua is great",
            "&&",
            "touch $out",
        },
        implicit_in = {
            "tools/build_env.sh",
            "$lib/luax.lua",
            "$luax",
        },
    },
--]]

---------------------------------------------------------------------

}

--===================================================================
section "Documentation"
---------------------------------------------------------------------

local markdown_sources = ls "doc/src/*.md"

local url = "cdelord.fr/luax"

rule "banner-1024" { command = {"lsvg $in $out -- 1024 192"} }
rule "logo-256"    { command = {"lsvg $in $out -- 256 256"} }
rule "logo-1024"   { command = {"lsvg $in $out -- 1024 1024"} }
rule "social-1280" { command = {"lsvg $in $out -- 1280 640", "'"..url.."'"} }

local images = {
    build "doc/luax-banner.svg"         {"banner-1024", "doc/src/luax-logo.lua"},
    build "doc/luax-logo.svg"           {"logo-256",    "doc/src/luax-logo.lua"},
    build "$builddir/luax-banner.png"   {"banner-1024", "doc/src/luax-logo.lua"},
    build "$builddir/luax-social.png"   {"social-1280", "doc/src/luax-logo.lua"},
    build "$builddir/luax-logo.png"     {"logo-1024",   "doc/src/luax-logo.lua"},
}

acc(doc)(images)

local pandoc_gfm = {
    "pandoc",
    "--to gfm",
    "--lua-filter doc/src/fix_links.lua",
    "--fail-if-warnings",
}

rule "ypp" {
    command = {
        "LUAX=$luax",
        "ypp --MD --MT $out --MF $doc/$out.d $in -o $out",
    },
    depfile = "$doc/$out.d",
    implicit_in = {
        "$luax",
    },
}

rule "md_to_gfm" {
    command = {
        pandoc_gfm, "$in -o $out",
    },
    implicit_in = {
        "doc/src/fix_links.lua",
        images,
    },
}

acc(doc) {

    build "README.md" { "md_to_gfm",
        build "$tmp/doc/README.md" { "ypp", "doc/src/luax.md" },
    },

    markdown_sources : map(function(src)
        return build("doc"/src:basename()) { "md_to_gfm",
            build("$tmp"/src) { "ypp", src },
        }
    end)

}

--===================================================================
section "Shorcuts"
---------------------------------------------------------------------

acc(compile) {binaries, libraries}

install "bin" (binaries)
install "lib" (libraries)

clean "$builddir"
clean.mrproper "$zig_cache"

phony "compile" (compile)
default "compile"
help "compile" "compile LuaX"

phony "test-fast" (test[1])
help "test-fast" "run LuaX tests (fast, native tests only)"

phony "test" (test)
help "test" "run all LuaX tests"

phony "doc" (doc)
help "doc" "update LuaX documentation"

phony "all" {"compile", "test", "doc"}
help "all" "alias for compile, test and doc"

phony "update" "update_modules"
help "update" "update third-party modules"
